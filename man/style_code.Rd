% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/style_code.R
\name{style_code}
\alias{style_code}
\title{Make function calls explicit}
\usage{
style_code(code, packages = pkgs_from_search_path(), ignore)
}
\arguments{
\item{code}{Code to transform. Either a character vector or \code{NULL}, in which
case any highlighted code (in RStudio) will be used.}

\item{packages}{A character vector of package names. The order is
important here - see examples for details.}

\item{ignore}{Functions to ignore when applying the transformation}
}
\value{
The transformed \code{code} as a character string
}
\description{
This function takes a block of code and seeks to make all function calls
'explicit' through the use of the double-colon operator \code{::}. This function
is bound to the RStudio addin \code{"Make function calls explicit"}. See examples
for usage.
}
\details{
This function behaves differently depending on the context.
\itemize{
\item \strong{Not package development}: If the current
context is not package development, then it will make function calls explicit
using the currently attached packages (i.e. the ones attached by calls to
\code{library()}).
\item \strong{Package development}: If it detects that the current context is package
development it will make function calls explicit using packages in the
'Imports' field of the package \code{DESCRIPTION}. If the package being developed
imports any packages in their entirety (i.e if \verb{Import pkg} appears in the
\code{NAMESPACE} file), calls to functions from these packages will be left
unchanged.
See \code{current_packages()} for more information.
}
}
\examples{
code <- "
  cars <- as_tibble(mtcars)
  cars \%>\%
    filter(mpg > 20) \%>\%
    summarise(across(everything(), n_distinct))
"

# Code will be transformed to use the double-colon operator, but notice
# that `n_distinct` is not transformed as it is not followed by `()`
cat(add_double_colons(code, "dplyr"))

# You can specify functions that shouldn't be transformed:
cat(add_double_colons(code, "dplyr", ignore = "across"))

# Beware namespace conflicts! The following are not the same, mimicking
# the effects of reordering calls to `library()`:
cat(add_double_colons(code, c("dplyr", "stats")))

cat(add_double_colons(code, c("stats", "dplyr")))
}
